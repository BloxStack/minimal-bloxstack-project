// Auto-generated by BloxStack - DO NOT EDIT
import { Networking } from "@flamework/networking";

interface ClientToServerFunctions {
  towerRoutes: {
    getGameState: () => GameState;
    updatePlayerHeight: (height: number) => { success: boolean; newBest?: boolean };
    activateCheckpoint: (checkpointId: number) => { success: boolean };
    resetToCheckpoint: () => { success: boolean; position?: Vector3 };
    getPersonalBest: () => number;
    getLeaderboard: () => Array<{ name: string; height: number; isOnline: boolean }>;
  };
}

interface ClientToServerEvents {}

interface ServerToClientFunctions {}

interface ServerToClientEvents {
  towerRoutes: {
    onGameStateChanged: (data: GameState) => void;
    onPlayerProgressUpdated: (data: { userId: number; progress: PlayerProgress }) => void;
    onTowerReset: (data: { newTowerId: string; resetTime: number }) => void;
    onCheckpointActivated: (data: { playerId: number; playerName: string; checkpointId: number }) => void;
    onPlayerFinished: (data: { playerId: number; playerName: string; time: number; newBest: boolean }) => void;
    onNewPersonalBest: (data: { playerId: number; playerName: string; height: number }) => void;
  };
}

// Create global networking objects
export const globalFunctions = Networking.createFunction<
  ClientToServerFunctions,
  ServerToClientFunctions
>();

export const globalEvents = Networking.createEvent<
  ClientToServerEvents,
  ServerToClientEvents
>();

// Server and client handlers
export const serverFunctions = globalFunctions.createServer({});
export const clientFunctions = globalFunctions.createClient({});
export const serverEvents = globalEvents.createServer({});
export const clientEvents = globalEvents.createClient({});
